# Preferred JSON mapper to use for HTTP message conversion.
spring.profiles.active=localtest
api_version=v1alpha
server.port=${DATA_MANAGER_PORT}
#Kafka connection
kafka.bootstrapAddress=${KAFKA_BOOTSTRAP_ADDRESS}
#LOGGING
logging.level.root=WARN
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR
#kafka topic names
aasenv.topic.name=${KAFKA_TOPIC_AASENV}
conceptdescription.topic.name=${KAFKA_TOPIC_CONCEPTDESCRIPTION}
assetadminshell.topic.name=${KAFKA_TOPIC_AAS}
asset.topic.name=${KAFKA_TOPIC_ASSET}
submodel.topic.name=${KAFKA_TOPIC_SUBMODEL}
listen.auto.start=true
#Basic Auth
#user.name=${username}
#user.password=${password}
#security.basic.enabled=false
#management.security.enabled=false
#BASIC-AUTH
basic.name=${DATA_MANAGER_USER}
basic.password=${DATA_MANAGER_PASSWORD}
## POSTGRES default connection pool
spring.datasource.hikari.connectionTimeout=20000
spring.datasource.hikari.maximumPoolSize=5
## PostgreSQL
spring.datasource.url=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DATABASE_NAME}
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
#drop n create table again, good for testing, comment this in production
spring.jpa.hibernate.ddl-auto=update
#spring.mvc.throw-exception-if-no-handler-found=true
#spring.resources.add-mappings=false
spring.security.oauth2.resourceserver.jwt.public-key-location:classpath:samplekey.pub
spring.security.oauth2.resourceserver.jwt.
logging.level.org.springframework.security=DEBUG
#spring.security.oauth2.resourceserver.jwt.jws-algorithm=RS256
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=https://admin-shell-io.com:50001/.well-known/openid-configuration/jwks

